IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_RELEASE' )
BEGIN  
	
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	BEGIN TRANSACTION
	PRINT '--------------------------------------------------'
	PRINT 'ACTION:  CREATE TABLE FRW_RELEASE' 
	PRINT '--------------------------------------------------'
	CREATE TABLE FRW_RELEASE
	(
		ID_RELEASE INT IDENTITY(1,1) NOT NULL,
		BLOCK INT NOT NULL,
		USER_EXEC VARCHAR(255) NOT NULL,
		KEY_DATABASE VARCHAR(255) NOT NULL,
		DATE_UPDATED DATETIME NOT NULL,
		CONSTRAINT PK_RELEASE PRIMARY KEY 
		(
			ID_RELEASE ASC
		)
	);

	IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
		ROLLBACK TRANSACTION 
		RAISERROR('Erro! Não foi possível criar a tabela: FRW_RELEASE', 10, 1)
		END
	ELSE BEGIN
		INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (0, GETDATE(), SUSER_SNAME(), 'KPFramework')
		COMMIT TRANSACTION
	END
END

DECLARE
	@KEY_DATABASE VARCHAR(255),
	@BLOCK_VERSION INT

BEGIN

	SET @KEY_DATABASE = 'KPFramework';
	
	SET @BLOCK_VERSION = 1
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_COMPANY')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_COMPANY'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_COMPANY
				(
					ID_COMPANY INT IDENTITY(1,1) NOT NULL,
					COMPANY_NAME VARCHAR(255) NOT NULL,
					COMPANY_FANTASY_NAME VARCHAR(255) NOT NULL,
					PHONE VARCHAR(13),
					CONSTRAINT PK_FRW_COMPANY PRIMARY KEY 
					(
						ID_COMPANY ASC
					),
					CONSTRAINT UN_COMPANY_NAME UNIQUE (COMPANY_NAME)
				);
				
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_COMPANY, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END

	SET @BLOCK_VERSION = 2
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_USER')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_USER'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_USER
				(
					ID_USER INT IDENTITY(1,1) NOT NULL,
					ID_COMPANY INT NOT NULL,
					USER_LOGIN VARCHAR(255) NOT NULL,
					USER_FULL_NAME VARCHAR(255) NOT NULL,
					USER_PASSWORD VARCHAR(255) NOT NULL,
					REDEFINE_PSWD_NEXT_LOGIN TINYINT NOT NULL,
					PHONE VARCHAR(13),
					EMAIL VARCHAR(255),
                    IS_ACCESS_ALLOWED TINYINT NOT NULL DEFAULT 0,
					CONSTRAINT PK_FRW_USER PRIMARY KEY 
					(
						ID_USER ASC
					),
					CONSTRAINT FK_FRW_USER_ID_COMPANY_FRW_COMPANY 
						FOREIGN KEY(ID_COMPANY) REFERENCES FRW_COMPANY (ID_COMPANY)
				);
				
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_USER, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 3
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_USER_COMPANY')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_USER_COMPANY'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_USER_COMPANY
				(
					ID_USER_COMPANY INT IDENTITY(1,1) NOT NULL,
					ID_COMPANY INT NOT NULL,
					ID_USER INT NOT NULL,
					IS_DEFAULT_COMPANY TINYINT NOT NULL DEFAULT 0,
					CONSTRAINT PK_FRW_USER_COMPANY PRIMARY KEY 
					(
						ID_USER_COMPANY ASC
					), 
					CONSTRAINT FK_FRW_USER_COMPANY_ID_COMPANY_FRW_COMPANY FOREIGN KEY(ID_COMPANY)
						REFERENCES FRW_COMPANY (ID_COMPANY),
					CONSTRAINT FK_FRW_USER_COMPANY_ID_USER_FRW_USER FOREIGN KEY(ID_USER)
						REFERENCES FRW_USER (ID_USER)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_USER_COMPANY, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 4
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_WINDOW')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_WINDOW'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_WINDOW
				(
					ID_WINDOW INT IDENTITY(1,1) NOT NULL,
					WINDOW_TITLE VARCHAR(128) NOT NULL,
					WINDOW_DESCRIPTION VARCHAR(255) NULL,
					WINDOW_PATH VARCHAR(255) NOT NULL,
                    WINDOW_ENUM VARCHAR(255) NOT NULL,
                    WINDOW_ALIAS VARCHAR(10) NULL,
					WINDOW_WIDTH INT NULL,
					WINDOW_HEIGHT INT NULL,
					CONSTRAINT PK_FRW_WINDOW PRIMARY KEY 
					(
						ID_WINDOW ASC
					)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_WINDOW, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 5
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_MENU')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_MENU'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_MENU
				(
					ID_MENU INT IDENTITY(1,1) NOT NULL,
					ID_PARENT INT NULL,
					ID_WINDOW INT NOT NULL,
					WINDOW_TITLE_MENU VARCHAR(128) NOT NULL,
					SEQUENCE INT NOT NULL,
					IS_VISIBLE BIT NOT NULL,
					IMAGE_URL VARCHAR(255) NULL,
					WIDTH INT NULL,
					HEIGHT INT NULL,
					MIN_WIDTH INT NULL,
					MIN_HEIGHT INT NULL,
					CONSTRAINT PK_FRW_MENU PRIMARY KEY 
					(
						ID_MENU ASC
					),
					CONSTRAINT FK_FRW_MENU_MENU FOREIGN KEY(ID_PARENT)
						REFERENCES FRW_MENU (ID_MENU),
					CONSTRAINT FK_FRW_MENU_WINDOW FOREIGN KEY(ID_WINDOW)
						REFERENCES FRW_WINDOW (ID_WINDOW)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_MENU, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 6
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_DATATYPE')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_DATATYPE'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_DATATYPE
				(
					ID_DATATYPE INT IDENTITY(1,1) NOT NULL,
					TYPE_NAME VARCHAR(255) NOT NULL,
					CONSTRAINT PK_FRW_DATATYPE PRIMARY KEY 
					(
						ID_DATATYPE ASC
					),
					CONSTRAINT UN_TYPE_NAME UNIQUE (TYPE_NAME)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_DATATYPE, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 7
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_PARAM')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_PARAM'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_PARAM
				(
					ID_PARAM VARCHAR(100) NOT NULL,
                    ID_COMPANY INT NULL,
					ID_DATATYPE INT NOT NULL,
					DESCRIPTION VARCHAR(255) NOT NULL,
					IS_EDITABLE BIT NULL,
					DEFAULT_VALUE VARCHAR(255) NULL,
					IS_COMPANY_REQUIRED BIT DEFAULT('1') NOT NULL,
					REGEX VARCHAR(255) NULL,
                    CONSTRAINT PK_FRW_PARAM PRIMARY KEY (ID_PARAM ASC),
                    CONSTRAINT FRW_PARAM_ID_COMPANY_FRW_COMPANY 
                        FOREIGN KEY(ID_COMPANY) REFERENCES FRW_COMPANY (ID_COMPANY),
                    CONSTRAINT FK_FRW_PARAM_DATATYPE_FRW_DATATYPE FOREIGN KEY(ID_DATATYPE)
                        REFERENCES FRW_DATATYPE (ID_DATATYPE)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_PARAM, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END

	
	SET @BLOCK_VERSION = 8
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_PARAM_LIST')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_PARAM_LIST'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_PARAM_LIST
				(
					ID_PARAM_LIST INT IDENTITY(1,1) NOT NULL,
                    ID_COMPANY INT NULL,
					ID_DATATYPE INT NOT NULL,
					ID_PARAM VARCHAR(100) NOT NULL,
					VALUE VARCHAR(255) NOT NULL,
					DESCRIPTION VARCHAR(255) NOT NULL,
					CONSTRAINT PK_FRW_PARAM_LIST PRIMARY KEY 
					(
						ID_PARAM_LIST ASC
					),
                    CONSTRAINT FRW_PARAM_LIST_ID_COMPANY_FRW_COMPANY 
                        FOREIGN KEY(ID_COMPANY) REFERENCES FRW_COMPANY (ID_COMPANY),
					CONSTRAINT FK_FRW_PARAM_LIST_DATATYPE_FRW_DATATYPE FOREIGN KEY(ID_DATATYPE)
						REFERENCES FRW_DATATYPE (ID_DATATYPE),
					CONSTRAINT FK_FRW_PARAM_LIST_PARAM_FRW_PARAM FOREIGN KEY(ID_PARAM)
						REFERENCES FRW_PARAM (ID_PARAM)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_PARAM_LIST, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 9
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_PARAM_VALUE')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_PARAM_VALUE'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_PARAM_VALUE
				(
					ID_PARAM_VALUE INT IDENTITY(1,1) NOT NULL,
					ID_COMPANY INT NULL,
					ID_PARAM VARCHAR(100) NOT NULL,
					VALUE VARCHAR(255) NOT NULL,
					CONSTRAINT PK_FRW_PARAM_VALUE PRIMARY KEY 
					(
						ID_PARAM_VALUE ASC
					),
					CONSTRAINT FK_FRW_PARAM_VALUE_ID_COMPANY_FRW_COMPANY FOREIGN KEY(ID_COMPANY)
						REFERENCES FRW_COMPANY (ID_COMPANY),
					CONSTRAINT FK_FRW_PARAM_VALUE_PARAM_FRW_PARAM FOREIGN KEY(ID_PARAM)
						REFERENCES FRW_PARAM (ID_PARAM)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_PARAM_VALUE, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 10
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_PROFILE')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_PROFILE'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_PROFILE
				(
					ID_PROFILE INT IDENTITY(1,1) NOT NULL,
                    ID_COMPANY INT NOT NULL,
					DESCRIPTION VARCHAR(255) NOT NULL,
					CONSTRAINT PK_FRW_PROFILE PRIMARY KEY 
					(
						ID_PROFILE ASC
					),
                    CONSTRAINT FRW_PROFILE_ID_COMPANY_FRW_COMPANY 
                        FOREIGN KEY(ID_COMPANY) REFERENCES FRW_COMPANY (ID_COMPANY)
				);
			
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_PROFILE, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 11
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_PROFILE_WINDOW')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_PROFILE_WINDOW'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_PROFILE_WINDOW
				(
					ID_PROFILE_WINDOW INT IDENTITY(1,1) NOT NULL,
                    ID_COMPANY INT NOT NULL,
					ID_WINDOW INT NOT NULL,
					ID_PROFILE INT NOT NULL,
					IS_PREVIEW BIT NOT NULL DEFAULT(0),
					IS_READONLY BIT NOT NULL DEFAULT(0),
					CONSTRAINT PK_FRW_PROFILE_WINDOW PRIMARY KEY 
					(
						ID_PROFILE_WINDOW ASC
					),
					CONSTRAINT FK_FRW_PROFILE_WINDOW_ID_COMPANY_FRW_COMPANY FOREIGN KEY(ID_COMPANY)
                        REFERENCES FRW_COMPANY (ID_COMPANY),
					CONSTRAINT FK_FRW_PROFILE_WINDOW_ID_WINDOW FOREIGN KEY(ID_WINDOW)
						REFERENCES FRW_WINDOW (ID_WINDOW),
					CONSTRAINT FK_FRW_PROFILE_WINDOW_ID_PROFILE_FRW_PROFILE FOREIGN KEY(ID_PROFILE)
						REFERENCES FRW_PROFILE (ID_PROFILE)
				);
							
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_PROFILE_WINDOW, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END

	SET @BLOCK_VERSION = 12
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_USER_PROFILE')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_USER_PROFILE'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_USER_PROFILE
				(
					ID_USER_PROFILE INT IDENTITY(1,1) NOT NULL,
                    ID_COMPANY INT NOT NULL,
					ID_PROFILE INT NOT NULL,
					ID_USER INT NOT NULL,
					CONSTRAINT PK_FRW_USER_PROFILE PRIMARY KEY 
					(
						ID_USER_PROFILE ASC
					),
					CONSTRAINT FRW_USER_PROFILE_ID_COMPANY_FRW_COMPANY 
						FOREIGN KEY(ID_COMPANY) REFERENCES FRW_COMPANY (ID_COMPANY),
					CONSTRAINT FK_FRW_USER_PROFILE_ID_PROFILE_FRW_PROFILE FOREIGN KEY(ID_PROFILE)
						REFERENCES FRW_PROFILE (ID_PROFILE),
					CONSTRAINT FK_FRW_USER_PROFILE_ID_USER_FRW_USER FOREIGN KEY(ID_USER)
						REFERENCES FRW_USER (ID_USER)
				);
							
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_USER_PROFILE, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 13
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_COMPONENT')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_COMPONENT'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_COMPONENT
				(
					ID_COMPONENT INT IDENTITY(1,1) NOT NULL,
					ID_WINDOW INT NOT NULL,
					COMPONENT_NAME_ID VARCHAR(255) NOT NULL,
                    TRANSLATE_KEY_NAME VARCHAR(255) NOT NULL,
                    DESCRIPTION VARCHAR(4000) NULL,
					CONSTRAINT PK_FRW_COMPONENT PRIMARY KEY 
					(
						ID_COMPONENT ASC
					),
					CONSTRAINT FK_FRW_COMPONENT_ID_WINDOW_FRW_WINDOW FOREIGN KEY(ID_WINDOW)
						REFERENCES FRW_WINDOW (ID_WINDOW)
				);
							
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_COMPONENT, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
	
	SET @BLOCK_VERSION = 14
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_ACTIVITY_LOG')
			BEGIN

				PRINT '--------------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_ACTIVITY_LOG'
				PRINT '--------------------------------------------------'

				CREATE TABLE FRW_ACTIVITY_LOG
				(
					ID_ACTIVITY_LOG INT IDENTITY(1,1) NOT NULL,
					ID_COMPANY INT NULL,
					ID_USER INT NULL,
					ID_WINDOW INT NULL,
                    LOGIN VARCHAR(255) NULL,
					SESSION_ID VARCHAR(255) NULL,
					DATE_ACCESS DATETIME NOT NULL,
					IP_ADDRESS VARCHAR(255) NULL,
					DESCRIPTION VARCHAR(255) NOT NULL,
					CONSTRAINT PK_FRW_ACTIVITY_LOG PRIMARY KEY 
					(
						ID_ACTIVITY_LOG ASC
					),
				);
							
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_ACTIVITY_LOG, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END
    
    SET @BLOCK_VERSION = 15
	IF NOT EXISTS(SELECT 1 FROM FRW_RELEASE WHERE BLOCK = @BLOCK_VERSION AND KEY_DATABASE = @KEY_DATABASE)
	BEGIN
		SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		BEGIN TRANSACTION
			PRINT '--------------------------------------------------'
			PRINT 'EXECUTANDO KEY_DATABASE:' +CONVERT(VARCHAR,@KEY_DATABASE)
			PRINT 'EXECUTANDO BLOCK:' +CONVERT(VARCHAR,@BLOCK_VERSION)
			PRINT '--------------------------------------------------'

			IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FRW_PROFILE_COMPONENT')
			BEGIN

				PRINT '------------------------------------------'
				PRINT 'ACTION: CREATE TABLE FRW_PROFILE_COMPONENT'
				PRINT '------------------------------------------'

				CREATE TABLE FRW_PROFILE_COMPONENT
				(
					ID_PROFILE_COMPONENT INT IDENTITY(1,1) NOT NULL,
					ID_COMPANY INT NOT NULL,
                    ID_PROFILE INT NOT NULL,
					ID_COMPONENT INT NOT NULL,
                    IS_VISIBLE BIT NOT NULL DEFAULT(0),
					IS_ENABLE BIT NOT NULL DEFAULT(0),
					CONSTRAINT PK_ID_PROFILE_COMPONENT PRIMARY KEY 
					(
						ID_PROFILE_COMPONENT ASC
					),
					CONSTRAINT FRW_PROFILE_COMPONENT_ID_COMPANY FOREIGN KEY(ID_COMPANY)
						REFERENCES FRW_COMPANY (ID_COMPANY),
					CONSTRAINT FRW_PROFILE_COMPONENT_ID_PROFILE FOREIGN KEY(ID_PROFILE)
						REFERENCES FRW_PROFILE (ID_PROFILE),
					CONSTRAINT FRW_PROFILE_COMPONENT_ID_COMPONENT FOREIGN KEY(ID_COMPONENT)
						REFERENCES FRW_COMPONENT (ID_COMPONENT)
				);
							
			END;

		IF (@@ERROR<>0) AND (@@TRANCOUNT>0) BEGIN
			ROLLBACK TRANSACTION
			RAISERROR('Erro! Não foi possível criar a tabela: FRW_ACTIVITY_LOG, Bloco: %d', 10, 1, @BLOCK_VERSION)
			END
		ELSE BEGIN
			INSERT INTO FRW_RELEASE (BLOCK, DATE_UPDATED, USER_EXEC, KEY_DATABASE) VALUES (@BLOCK_VERSION, GETDATE(), SUSER_SNAME(), @KEY_DATABASE)
			COMMIT TRANSACTION
		END
	END

    
END